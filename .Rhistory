unrotated_pc_loadings <-as.data.frame(unclass(dow_jones_PCA$loadings))
unrotated_pc_loadings
dow_jones_PCA<-fa(cor_matrix,nfactors = 5,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
dow_jones_PCA
dow_jones_PCA<-fa(cor_matrix,nfactors = 4,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
dow_jones_PCA
dow_jones_PCA<-fa(cor_matrix,nfactors = 5,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
dow_jones_PCA
#unrotated loadings for PCA
unrotated_pc_loadings <-as.data.frame(unclass(dow_jones_PCA$loadings))
unrotated_pc_loadings
#communalities
unrotated_pc_com <- as.data.frame(unclass(dow_jones_PCA$communality))
unrotated_pc_com
rotated_pc_com<-as.data.frame(dow_jones_PCA$communality)
rotated_pc_com
dow_jones_PCA<-fa(cor_matrix,nfactors = 4,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
dow_jones_PCA
#communalities
unrotated_pc_com <- as.data.frame(unclass(dow_jones_PCA$communality))
unrotated_pc_com
rotated_pc_com<-as.data.frame(dow_jones_PCA$communality)
rotated_pc_com
dow_jones_PCA<-fa(cor_matrix,nfactors = 5,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
#communalities
unrotated_pc_com <- as.data.frame(unclass(dow_jones_PCA$communality))
unrotated_pc_com
rotated_pc_com<-as.data.frame(dow_jones_PCA$communality)
rotated_pc_com
#FA with ML
dow_jones_ML <- fa(cor_matrix,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
dow_jones_ML
#communalities
dow_jones_ml_com<-as.data.frame(dow_jones_ML$communality)
dow_jones_ml_com
unrotated
#FA with ML
dow_jones_ML <- fa(cor_matrix,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
dow_jones_ML
#communalities
dow_jones_ml_com<-as.data.frame(dow_jones_ML$communality)
dow_jones_ml_com
#unrotated
dow_jones_ml_com<-as.data.frame(unclass(dow_jones_ML$communality))
dow_jones_ml_com
#FA with ML
dow_jones_ML <- fa(cor_matrix,nfactors = 5,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
dow_jones_ML
#factor diagram
fa.diagram(dow_jones_ML)
fa.diagram(dow_jones_PCA)
#factor diagram
fa.diagram(dow_jones_ML)
fa.diagram(dow_jones_PCA)
dow_jones_PCA
dow_jones_PCA
variables <-dow_jones_data[,-c("DD")]
View(dow_jones)
variables <-dow_jones_data[,-12]
variables <-dow_jones_data[,-12]
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCP
Factor4 =~ PCPNW
Factor5 =~ PCVLW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
any(is.na(variables))
variables <-dow_jones_data[,-12]
any(is.na(variables))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCP
Factor4 =~ PCPNW
Factor5 =~ PCVLW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
View(variables)
View(variables)
View(dow_jones)
View(dow_jones_1)
variables <-dow_jones[,-12]
any(is.na(variables$N))
#define the CFA model
model <- '
variables <-dow_jones[,-12]
any(is.na(variables$N))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCP
Factor4 =~ PCPNW
Factor5 =~ PCVLW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
# Assess model fit
summary(fit, fit.measures = TRUE)
# Standardized estimates (factor loadings)
parameterEstimates(fit, standardized = TRUE, ci = TRUE)
variables <-dow_jones[,-12]
any(is.na(variables$N))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCP
Factor4 =~ PCPNW
Factor5 =~ PCVLW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
# Assess model fit
summary(fit, fit.measures = TRUE)
# Standardized estimates (factor loadings)
parameterEstimates(fit, standardized = TRUE, ci = TRUE)
cov(variables)
normalized_data<-scale(dow_jones)
KMO(r=normalized_data)
cortest.bartlett(normalized_data)
KMO(r=normalized_data)
corr_norm<-cor(normalized_data)
corrplot(normalized_data)
corrplot(corr_norm)
efa_result_norm<-fa(corr_norm,nfactors = 13,rotate = "none")
eigen_values_norm<-efa_result$values
eigen_values_norm
num_factors_kaiser_norm<-sum(eigen_value_norms>1)
num_factors_kaiser_norm<-sum(eigen_value_norm>1)
num_factors_kaiser_norm<-sum(eigen_values_norm>1)
num_factors_kaiser_norm
corrplot(corr_norm,method = "square")
efa_result_norm<-fa(corr_norm)$values
num_factors_kaiser<-sum(eigen_values>1)
num_factors_kaiser_norm<-sum(eigen_values_norm>1)
var_explained_norm=(eign_values_norm/sum(eign_values_norm))
eign_values_norm<-eigen(corr_norm)$values
eigen_values_norm
efa_result_norm
eigen_values_norm<-efa_result$values
eigen_values_norm
num_factors_kaiser_norm<-sum(eigen_values_norm>1)
var_explained=(eignvalues/sum(eignvalues))
var_explained
scree(normalized_data)
#parallel Analysis from Scree plots
fa.parallel(dow_jones,fm="pa",fa="fa")
fa.parallel(normalized_data,fm="pa",fa="fa")
pca_norm<-fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
pca_norm
pc_loadings_norm <-as.data.frame(unclass(pca_norm$loadings))
pc_loadings_norm
pc_com_norm
pc_com_norm <- as.data.frame(unclass(pca_norm$communality))
pc_com_norm
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#communalities
ml_Norm_com<-as.data.frame(ml_norm$communality)
ml_Norm_com
ml_norm
#factor diagram
fa.diagram(ml_norm)
fa.diagram(pca_norm)
jow_dones_data_fa<-factanal(normalized_data,factors=5)
jow_dones_data_fa
variables <-normalized_data[,-12]
cov(variables)
any(is.na(variables$N))
any(is.na(variables))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCP
Factor4 =~ PCPNW
Factor5 =~ PCVLW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
# Assess model fit
summary(fit, fit.measures = TRUE)
# Standardized estimates (factor loadings)
parameterEstimates(fit, standardized = TRUE, ci = TRUE)
pca_norm<-fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
pca_norm
fa.diagram(pca_norm)
View(normalized_data)
variables <-normalized_data[,-c(11:12)]
cov(variables)
any(is.na(variables))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCVLW
Factor4 =~ PCPNW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
variables <-normalized_data[,-c(6,12)]
cov(variables)
any(is.na(variables))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCVLW
Factor4 =~ PCPNW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
# Assess model fit
summary(fit, fit.measures = TRUE)
# Standardized estimates (factor loadings)
parameterEstimates(fit, standardized = TRUE, ci = TRUE)
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#communalities
ml_Norm_com<-as.data.frame(ml_norm$communality)
ml_Norm_com
#unrotated
dow_jones_ml_com<-as.data.frame(unclass(dow_jones_ML$communality))
dow_jones_ml_com
fit1<-sem(model,data = variables)
summary(fit1,fitmeasures=TRUE,standardized=TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 7, shapeMan = "rectangle", sizeMan = 8, sizeMan2 = 5)
install.packages("semPlot")
library(semplot)
library(semPlot)
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 7, shapeMan = "rectangle", sizeMan = 8, sizeMan2 = 5)
library(semPlot)
install.packages("semPlot")
library(semPlot)
install.packages("htmltools")
library(semPlot)
knitr::opts_chunk$set(echo = TRUE)
library(semPlot)
install.packages("htmltools")
library(tidyverse)
library(corrplot)
library(psych)
library(lavaan)
library(ggplot2)
library(factoextra)
library(semPlot)
install.packages("htmltools", dependencies = TRUE)
library(semPlot)
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 7, shapeMan = "rectangle", sizeMan = 8, sizeMan2 = 5)
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 8, shapeMan = "rectangle", sizeMan = 9, sizeMan2 = 5,edge.color="blue")
eigen_values_norm<-eigen(corr_norm)
eigen_norm<-eigen(corr_norm)
eigen_values_norm<-eigen_norm$values
eigen_values_norm
rounded_eigenvalues <- round(eigen_values_norm, digits = 4)
round(eigen_values_norm, digits = 4)
eigen_values_norm<-round(eigen_values_norm, digits = 4)
var_explained_norm=(eign_values_norm/sum(eign_values_norm))
var_explained_norm
round(var_explained_norm,digits = 4)
jow_dones_data_fa<-factanal(normalized_data,factors=4)
jow_dones_data_fa
#communalities
unrotated_pc_com <- as.data.frame(unclass(dow_jones_PCA$communality))
pc_com_norm <- as.data.frame(unclass(pca_norm$communality))
pc_com_norm
pc_com_norm_rotated<-as.data.frame(dow_jones_PCA$communality)
pc_com_norm_rotated
pc_com_norm <- as.data.frame(unclass(pca_norm$communality))
pc_com_norm
pc_com_norm_rotated<-as.data.frame(dow_jones_PCA$communality)
pc_com_norm_rotated
#unrotated loadings for PCA
unrotated_pc_loadings <-as.data.frame(unclass(pca_norm$loadings))
pc_com_norm_rotated<-as.data.frame(pca_norm$communality)
pc_com_norm_rotated
pc_com_norm
pc_com_norm_rotated
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 8, shapeMan = "rectangle", sizeMan = 9, sizeMan2 = 5,posCol=c("skyblue4","red"))
edge.color="blue"
semPlot::semPaths(fit1,"std")
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 8, shapeMan = "rectangle", sizeMan = 9, sizeMan2 = 5,edge.color="blue")
#Factor analysis from PA method
dw_pca<-princomp(cor_matrix)
dw_pca
summary(dw_pca)
dw_pca
summary(dw_pca)
#FA with ML
dow_jones_ML <- fa(cor_matrix,nfactors = 5,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
dow_jones_ML
dow_jones_ML
dow_jones_ML$loadings
#communalities
dow_jones_ml_com<-as.data.frame(dow_jones_ML$communality)
dow_jones_ml_com
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#communalities
ml_Norm_com<-as.data.frame(ml_norm$communality)
ml_Norm_com
#unrotated loadings for PCA
unrotated_pc_loadings <-as.data.frame(unclass(pca_norm$loadings))
unrotated_pc_loadings
dow_jones_PCA
dow_jones_PCA<-fa(cor_matrix,nfactors = 4,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
dow_jones_PCA
dow_jones_PCA
#factor diagram
fa.diagram(ml_norm)
fa.diagram(ml_norm)
fa.diagram(pca_norm)
dow_jones_ml_com
ml_norm
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 7, shapeMan = "rectangle", sizeMan = 8, sizeMan2 = 5)
KMO(r=normalized_data)
cortest.bartlett(normalized_data)
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCVLW
Factor4 =~ PCPNW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
fit1<-sem(model,data = variables)
# Assess model fit
summary(fit, fit.measures = TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
semPlot::semPaths(fit1,"std")
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 8, shapeMan = "rectangle", sizeMan = 9, sizeMan2 = 5,edge.color="blue")
# Standardized estimates (factor loadings)
parameterEstimates(fit, standardized = TRUE, ci = TRUE)
num_factors_kaiser<-sum(eigen_values>1)
num_factors_kaiser
num_factors_kaiser<-sum(eigen_values_norm>1)
num_factors_kaiser
#factor diagram
fa.diagram(ml_norm)
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#factor diagram
fa.diagram(ml_norm)
variables <-normalized_data[,-12]
any(is.na(variables))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ PCVLW
Factor3 =~ PCPNW
Factor4 =~ PCP
Factor5 =~ volume+PWV+PRND
'
# Fit the CFA model
fit <- cfa(model, data = variables)
fit1<-sem(model,data = variables)
# Assess model fit
summary(fit, fit.measures = TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
ml_norm <- fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
pca_norm<-fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
pca_norm
pca_norm<-fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
pca_norm
pca_norm<-fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
pca_norm
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#factor diagram
fa.diagram(ml_norm)
KMO(r=normalized_data)
cortest.bartlett(normalized_data)
eign_values_norm<-eigen(corr_norm)$values
eigen_values_norm
num_factors_kaiser<-sum(eigen_values_norm>1)
num_factors_kaiser
eigen_values_norm
scree(normalized_data)
scree(normalized_data)
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot::ggcorrplot(corr_norm)
fa.diagram(pca_norm)
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ PCPNW
Factor3 =~ volume+PWV+PRND
Factor4 =~ PCVLW
'
# Fit the CFA model
fit <- cfa(model, data = variables)
fit1<-sem(model,data = variables)
# Assess model fit
summary(fit, fit.measures = TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCP
Factor4 =~ PCPNW
Factor5 =~ PCVLW
'
# Fit the CFA model
#fit <- cfa(model, data = variables)
fit1<-sem(model,data = variables)
# Assess model fit
#summary(fit, fit.measures = TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
pca_norm<-fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
pca_norm
dow_jones_PCA<-fa(cor_matrix,nfactors = 5,rotate = "varimax",n.obs = 720,cor=TRUE,fm="pa",max.iter = 1000,scores = "regression")
dow_jones_PCA
#FA with ML
dow_jones_ML <- fa(cor_matrix,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
dow_jones_ML
#factor diagram
fa.diagram(ml_norm)
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ PCPNW
Factor3 =~ volume+PWV+PRND
Factor4 =~ PCVLW
'
# Fit the CFA model
#fit <- cfa(model, data = variables)
fit1<-sem(model,data = variables)
# Assess model fit
#summary(fit, fit.measures = TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
dow_jones_PCA
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 4,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
#FA with ML
ml_norm <- fa(corr_norm,nfactors = 5,rotate = "varimax",n.obs = 720 , corr = TRUE, fm = 'ml')
ml_norm
pc_com_norm_rotated<-as.data.frame(pca_norm$communality)
pc_com_norm_rotated
pc_com_norm <- as.data.frame(unclass(pca_norm$communality))
pc_com_norm
pc_com_norm_rotated
#communalities
dow_jones_ml_com<-as.data.frame(dow_jones_ML$communality)
dow_jones_ml_com
fa.diagram(pca_norm)
fa.diagram(pca_norm)
ml_norm
#factor diagram
fa.diagram(ml_norm)
fa.diagram(pca_norm)
variables <-normalized_data[,-12]
cov(variables)
any(is.na(variables))
#define the CFA model
model <- '
Factor1 =~ open+high+low+close+NWO+NWC
Factor2 =~ volume+PWV+PRND
Factor3 =~ PCVLW
Factor4 =~ PCPNW
'
# Fit the CFA model
#fit <- cfa(model, data = variables)
fit1<-sem(model,data = variables)
# Assess model fit
#summary(fit, fit.measures = TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
semPlot::semPaths(fit1,"std")
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 8, shapeMan = "rectangle", sizeMan = 9, sizeMan2 = 5,edge.color="blue")
# Standardized estimates (factor loadings)
parameterEstimates(fit, standardized = TRUE, ci = TRUE)
# Assess model fit
#summary(fit, fit.measures = TRUE)
summary(fit1,fit.measures=TRUE,standardized=TRUE)
semPlot::semPaths(fit1,"std")
semPaths(fit1, what = "col", whatLabels = "std", style = "mx", rotation = 1,
layout = "tree", nCharNodes = 8, shapeMan = "rectangle", sizeMan = 9, sizeMan2 = 5,edge.color="blue")
